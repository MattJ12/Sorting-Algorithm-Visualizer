{"version":3,"sources":["Components/SortingAlgorithms/MergeSort.js","Components/SortingAlgorithms/QuickSort.js","Components/SortingAlgorithms/SelectionSort.js","Components/SortingAlgorithms/BubbleSort.js","Components/Main.js","App.js","index.js"],"names":["mergeSort","arr","helperArr","animations","low","high","middle","Math","floor","merge","i","left","curr","right","push","upper","quickSortHelper","index","partition","indexes","pivot","temp","selectionSort","length","minIndex","j","bubbleSort","hasSwapped","Main","props","state","algo","SORTABLE","NUM_BARS","SORTING_SPEED","DEFAULT_COLOR","COLOR","this","resetArray","algoIndex","setState","algorithmButtons","document","getElementsByClassName","style","backgroundColor","value","randomNumber","window","screen","height","min","max","random","toggle","disabled","arrayBars","setTimeout","setBarColor","toggleAllButtons","quickSort","Array","MergeSort","animation","color","setBarHeight","finishedSortingAnimation","QuickSort","SelectionSort","BubbleSort","findHeight","innerHTML","placeArrayValue","className","onClick","setAlgo","runSortingAnimation","type","onChange","evt","changeNumElements","parseInt","target","map","idx","key","width","Component","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d49086fb.chunk.js","sourcesContent":["// Merge sort algorithm.  This is a divide and conquer algorithm where\r\n// the array is continually divided in half and the sub-arrays are sorted,\r\n// then merged together to sort the entire array.\r\n// Time complexity: O(nlog(n)) average and worst case.\r\n// Space complexity: O(n).\r\nexport const MergeSort = (arr) => {\r\n   const animations = [];\r\n   const helperArr = new Array(arr.length);\r\n   mergeSort(arr, helperArr, animations, 0, arr.length - 1);\r\n   return animations;\r\n}\r\n\r\n// Accepts array arr, array helperArr, array animations, integer low,\r\n// integer high and splits up sub-arrays to sort based on the low and high\r\n// indexes until low and high are equal, meaning the array is down to one element.\r\nconst mergeSort = (arr, helperArr, animations, low, high) => {\r\n   if (low < high) {\r\n      const middle = Math.floor((low + high) / 2);\r\n      mergeSort(arr, helperArr, animations, low, middle);\r\n      mergeSort(arr, helperArr, animations, middle + 1, high);\r\n      merge(arr, helperArr, animations, low, middle, high);\r\n   }\r\n}\r\n\r\n// Accepts array arr, array helperArr, array animations, integer low,\r\n// integer middle, integer high and marges both halves of helperArr together\r\n// based on low, middle and high indexes.\r\nconst merge = (arr, helperArr, animations, low, middle, high) => {\r\n   // Fills helperArr copy of arr for elements being considered.\r\n   for (let i = low; i <= high; i++) {\r\n      helperArr[i] = arr[i];\r\n   }\r\n   let left = low;\r\n   let curr = low;\r\n   let right = middle + 1;\r\n   // While there are elements on both sides of the array to be compared.\r\n   while (left <= middle && right <= high) {\r\n      // Push once to change the color of the bars being compared.\r\n      animations.push([left, right]);\r\n      // Push a second time to change the color of the bars\r\n      // being compared back to their default color.\r\n      animations.push([left, right]);\r\n      // If left element <= right element.\r\n      if (helperArr[left] <= helperArr[right]) {\r\n         // Push the index in arr whose value needs to be set to\r\n         // the value of helperArr[left].\r\n         animations.push([curr, helperArr[left]])\r\n         arr[curr] = helperArr[left];\r\n         left++;\r\n      } else { // If right element < left element\r\n         // Push the index in arr whose value needs to be set to\r\n         // the value of helperArr[right].\r\n         animations.push([curr, helperArr[right]]);\r\n         arr[curr] = helperArr[right];\r\n         right++;\r\n      }\r\n      curr++;\r\n   }\r\n   // One half of helperArr has at least one element to be added onto arr.\r\n   let lower = middle - left >= 0 ? left : right;\r\n   let upper = middle - left >= 0 ? middle : high;\r\n   for (let i = lower; i <= upper; i++) {\r\n      // Push once to change the color of the bars being compared.\r\n      animations.push([i, i]);\r\n      // Push a second time to change the color of the bars\r\n      // being compared back to their default color.\r\n      animations.push([i, i]);\r\n      // Push the index in arr whose value needs to be set to\r\n      // the value of helperArr[i].\r\n      animations.push([curr, helperArr[i]]);\r\n      arr[curr] = helperArr[i];\r\n      curr++;\r\n   }\r\n}\r\n","// Quick sort algorithm.  A random element (the pivot) is selected and the array\r\n// is partitioned such that all values less than the pivot come before it in the\r\n// array and all values large than the pivot come after it.  If sub-arrays are\r\n// repeatedly partitioned around a pivot, the array will become sorted.\r\n// Time complexity: O(nlog(n)) average, O(n^2) worst case.\r\n// Space complexity: O(log(n)).\r\nexport const QuickSort = (arr) => {\r\n   const animations = [];\r\n   quickSortHelper(arr, animations, 0, arr.length - 1);\r\n   return animations;\r\n}\r\n\r\n// Accepts array arr, array animations, integer left, and integer right\r\n// as parameters and sorts arr based off of the left and right index parameters.\r\nconst quickSortHelper = (arr, animations, left, right) => {\r\n   const index = partition(arr, animations, left, right);\r\n   // Recrsively sort left half.\r\n   if (left < index - 1) quickSortHelper(arr, animations, left, index - 1);\r\n   // Recursively sort right half.\r\n   if (right > index) quickSortHelper(arr, animations, index, right);\r\n}\r\n\r\n// Accepts an array arr, array animations, integer left, integer right\r\n// as parameters and partitions a sub-array of arr based off the left\r\n// and right index parameters such that all elements less than the pivot\r\n// come before the elements larger than the pivot.  Returns an integer\r\n// used to help split up sub-arrays.\r\nconst partition = (arr, animations, left, right) => {\r\n   // 0 -> default color\r\n   // 1 -> non-default color\r\n   const indexes = [0, 1];\r\n   const pivot = arr[Math.floor((left + right) / 2)]; // Choose pivot index.\r\n   while (left <= right) {\r\n      // Iterate on both right and left halves until either half\r\n      // has found a value to be swapped to the other side.\r\n      while (arr[left] < pivot && arr[right] > pivot) {\r\n         // Animation for changing bar colors of\r\n         // bars at current indexes being checked to non-default color.\r\n         animations.push([indexes[1], left, right]);\r\n         // Animation for changing bar colors\r\n         // of bars at current indexes back to default color.\r\n         animations.push([indexes[0], left, right]);\r\n         left++;\r\n         right--;\r\n      }\r\n      // When the value to be swapped on left has not been found yet.\r\n      if (arr[left] < pivot) {\r\n         // Right bar should stay non-default color to signify it is ready to swap.\r\n         animations.push([indexes[1], right]);\r\n         while (arr[left] < pivot) {\r\n            // Animation for changing left bar color to non-default color.\r\n            animations.push([indexes[1], left]);\r\n            // Animation for chaning left bar color back to default color.\r\n            animations.push([indexes[0], left]);\r\n            left++;\r\n         }\r\n         // Right bar should change back to default color because a swap has been found.\r\n         animations.push([indexes[0], right]);\r\n      }\r\n      // When the value to be swapped on right has not been found yet.\r\n      if (arr[right] > pivot) {\r\n         // Left bar should stay non-default color to signify it is ready to swap.\r\n         animations.push([indexes[1], left]);\r\n         while (arr[right] > pivot)  {\r\n            // Animation for changing right bar color to non-default color.\r\n            animations.push([indexes[1], right]);\r\n            // Animation for changing right bar color back to default color.\r\n            animations.push([indexes[0], right]);\r\n            right--;\r\n         }\r\n         // Left bar should change back to default color because a swap has been found.\r\n         animations.push([indexes[0], left]);\r\n      }\r\n      // Executes the value swap in the array.\r\n      if (left <= right) {\r\n         // Animation for swapping elements.\r\n         animations.push([arr[left], arr[right], left, right]);\r\n         // Swap elements in aray (must use temp variable).\r\n         let temp = arr[right];\r\n         arr[right] = arr[left];\r\n         arr[left] = temp;\r\n         left++;\r\n         right--;\r\n      }\r\n   }\r\n   return left;\r\n}\r\n","// Selection sort algorithm.  Keeps the front half of the array\r\n// sorted while repeatedly scanning the back half of the array (unsorted)\r\n// looking for the smallest element and swapping it with the element\r\n// right after the sorted front half of the array.\r\n// Time complexity: O(n^2) average and worst case.\r\n// Space complexity: O(1).\r\nexport const SelectionSort = (arr) => {\r\n   const animations = [];\r\n   selectionSort(arr, animations);\r\n   return animations;\r\n}\r\n\r\n// Accept an array arr, array animations and sorts arr using\r\n// the selection sort algorithm.\r\nconst selectionSort = (arr, animations) => {\r\n   // 0 -> default color\r\n   // 1 -> non-default color\r\n   const index = [0, 1];\r\n   // Iterating through every unsorted element of arr.\r\n   for (let i = 0; i < arr.length - 1; i++) {\r\n      let minIndex = i;\r\n      // Animation for bar at initial minimum index to change to non-default color.\r\n      animations.push([index[1], minIndex]);\r\n      // Comparing arr[i] to every other unsorted value in arr to find next minimum.\r\n      for (let j = i + 1; j < arr.length; j++) {\r\n         // Push animation for changing bar at index j to non-default for being compared.\r\n         animations.push([index[1], j]);\r\n         // Push animation for changing bar color at index j back to default color.\r\n         animations.push([index[0], j]);\r\n         // If I've found a new minimum value.\r\n         if (arr[j] < arr[minIndex]) {\r\n            // Animation for changing color of bar at previous\r\n            // minimum index back to default color.\r\n            animations.push([index[0], minIndex]);\r\n            minIndex = j;\r\n            // Animation for changing color of bar at new minimum index\r\n            // to non-default color.\r\n            animations.push([index[1], minIndex]);\r\n         }\r\n      }\r\n      // Animation to change color of bar at minimum index\r\n      // to default color before the value swap.\r\n      animations.push([index[0], minIndex]);\r\n      // Animation for swapping of arr values at i and minIndex.\r\n      animations.push([i, minIndex, arr[i], arr[minIndex]]);\r\n      let temp = arr[i];\r\n      arr[i] = arr[minIndex];\r\n      arr[minIndex] = temp;\r\n   }\r\n}\r\n","// Bubble sort algorithm.  Iterate through array, comparing\r\n// every pair of elements and swap if the first value is greater\r\n// than the second value.  Keep doing this until array is completely sorted.\r\n// Time complexity: O(n^2) average and worst case.\r\n// Space complexity: O(1).\r\nexport const BubbleSort = (arr) => {\r\n   const animations = [];\r\n   bubbleSort(arr, animations);\r\n   return animations;\r\n}\r\n\r\n// Accepts array arr and array animations as parameters and applies the\r\n// bubble sort algorithm to sort arr.\r\nconst bubbleSort = (arr, animations) => {\r\n   // 0 -> default color\r\n   // 1 -> non-default color\r\n   const index = [0, 1];\r\n   // Making a number of passes equal to the number of elements\r\n   // in arr ensures the array is sorted.\r\n   // Loop breaks if arr is sorted before arr.length iterations.\r\n   for (let i = 0; i < arr.length; i++) {\r\n      let hasSwapped = false;\r\n      // Iterate through arr, swapping elements to ensure ascending value.\r\n      for (let j = 0; j < arr.length - 1; j++) {\r\n         // Animation for bar at index j and j + 1 changing\r\n         // to non-default color to show comparison.\r\n         animations.push([index[1], j, j + 1]);\r\n         // Animation for bar at index j and j + 1 changing\r\n         // to default color after comparison.\r\n         animations.push([index[0], j, j + 1]);\r\n         // Swapping of values.\r\n         if (arr[j] > arr[j + 1]) {\r\n            // Animation to swap values in arr.\r\n            animations.push([j, j + 1, arr[j], arr[j + 1]])\r\n            let temp = arr[j];\r\n            arr[j] = arr[j + 1];\r\n            arr[j + 1] = temp;\r\n            hasSwapped = true;\r\n         }\r\n      }\r\n      if (!hasSwapped) break;\r\n   }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { MergeSort } from './SortingAlgorithms/MergeSort'\r\nimport { QuickSort } from './SortingAlgorithms/QuickSort'\r\nimport { SelectionSort } from './SortingAlgorithms/SelectionSort'\r\nimport { BubbleSort } from './SortingAlgorithms/BubbleSort'\r\nimport './Main.css';\r\n\r\n// This component handles all of the rendering for the visualizer and interprets\r\n// the animations array that is returned from the sorting algorithm files.\r\nexport default class Main extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         arr: [],\r\n         algo: '',\r\n         SORTABLE: false,\r\n         NUM_BARS: 75,\r\n         SORTING_SPEED: 247,\r\n         DEFAULT_COLOR: '#add8e6',\r\n         COLOR: '#A020F0'\r\n      };\r\n   }\r\n\r\n   // Hook that executes after first render() lifecycle.\r\n   // Initializes arr stored in Main's state.\r\n   componentDidMount() {\r\n      this.resetArray(this.state.NUM_BARS);\r\n   }\r\n\r\n   // Accepts an integer algoIndex as parameter and updates the state of\r\n   // the Main component to store a string representation of the sorting\r\n   // algorithm selected by the user.  Enables start animation button for user.\r\n   // Selects/un-selects current algorithm button on UI depending on\r\n   // which algorithm button the user clicked.\r\n   setAlgo(algoIndex) {\r\n      const algos = ['quick sort', 'merge sort', 'bubble sort', 'selection sort']\r\n      this.setState({algo: algos[algoIndex], SORTABLE: true});\r\n      const algorithmButtons = document.getElementsByClassName('algorithm-button');\r\n      for (let i = 0; i < algorithmButtons.length; i++) {\r\n         // Select/un-select algo button depending on which algo button user clicked.\r\n         algorithmButtons[i].style.backgroundColor = i === algoIndex ? '#325C74' : '#add8e6';\r\n      }\r\n   }\r\n\r\n   // Accepts a string length as parameter and updates the state\r\n   // of the Main component to have NUM_BARS equal the parameter length.\r\n   // Updates arr stored in the state of the Main component to have a\r\n   // number of values equal to the value of the parameter length.\r\n   changeNumElements(length) {\r\n      this.setState({NUM_BARS: length});\r\n      this.resetArray(length);\r\n   }\r\n\r\n   // Accepts an integer parameter value and returns it\r\n   // if NUM_BARS stored in Main's state is less than 38,\r\n   // otherwise returns an empty string.\r\n   placeArrayValue(value) {\r\n      if (this.state.NUM_BARS < 38) return Math.floor(value);\r\n      return '';\r\n   }\r\n\r\n   // Accepts an integer parameter value and if it is smaller\r\n   // than 24 it returns 24, otherwise returns value.\r\n   findHeight(value) {\r\n      if (value < 24) return 24;\r\n      return value;\r\n   }\r\n\r\n   // Accepts integer parameter length and fills arr in\r\n   // Main's state with a number of random elements\r\n   // equal to parameter length.\r\n   resetArray(length) {\r\n      const arr = [];\r\n      for (let i = 0; i < length; i++) {\r\n         arr.push(this.randomNumber(5, window.screen.height - 310));\r\n      }\r\n      this.setState({arr});\r\n   }\r\n\r\n   // Accepts integers min and max as paramters and returns\r\n   // a random number between min (inclusive) and max (exclusive).\r\n   randomNumber(min, max) {\r\n      return Math.random() * (max - min) + min;\r\n   }\r\n\r\n   // Accepts a boolean parameter toggle and toggles all the buttons\r\n   // on this page depending on the boolean value of toggle.\r\n   toggleAllButtons(toggle) {\r\n      const algorithmButtons = document.getElementsByClassName('algorithm-button');\r\n      for (let i = 0; i < 4; i++) {\r\n         algorithmButtons[i].disabled = toggle;\r\n      }\r\n      document.getElementsByClassName('create-array-button')[0].disabled = toggle;\r\n      document.getElementsByClassName('start-sorting-button')[0].disabled = toggle;\r\n      document.getElementsByClassName('num-elements')[0].disabled = toggle;\r\n      document.getElementsByClassName('sorting-speed')[0].disabled = toggle;\r\n   }\r\n\r\n   // Executes at the end of the sorting animation.\r\n   // Flashes all bars to the non-default color and back.\r\n   // Toggles on all buttons on the page after the\r\n   // finished sorting animation has run.\r\n   finishedSortingAnimation() {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      for (let i = 0; i < arrayBars.length; i++) {\r\n         setTimeout(() => {\r\n            this.setBarColor(i, this.state.COLOR, arrayBars);\r\n            // After last bar has been changed to non-default color\r\n            // wait 1000 milliseconds then turn every bar back to\r\n            // the default color and toggle on buttons on page.\r\n            if (i === arrayBars.length - 1) {\r\n               setTimeout(() => {\r\n                  for(let j = 0; j < arrayBars.length; j++) {\r\n                     this.setBarColor(j, this.state.DEFAULT_COLOR, arrayBars);\r\n                  }\r\n                  this.toggleAllButtons(false);\r\n               }, 1000)\r\n            }\r\n         }, i * 3)\r\n      }\r\n   }\r\n\r\n   // Runs the animation function for the specific sort.\r\n   // Toggles off all buttons before starting.\r\n   runSortingAnimation() {\r\n      this.toggleAllButtons(true);\r\n      const algo = this.state.algo;\r\n      if (algo === 'quick sort') this.quickSort();\r\n      else if (algo === 'merge sort') this.mergeSort();\r\n      else if (algo === 'bubble sort') this.bubbleSort();\r\n      else this.selectionSort();\r\n   }\r\n\r\n   // Creates animations for the merge sort algorithm.\r\n   mergeSort() {\r\n      const animations = MergeSort(this.state.arr);\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      for (let i = 0; i < animations.length; i++) {\r\n         const animation = animations[i];\r\n         setTimeout(() => {\r\n            // Change color of bars being compared.\r\n            if (i % 3 < 2) {\r\n               const color = i % 3 === 1 ? this.state.DEFAULT_COLOR : this.state.COLOR;\r\n               this.setBarColor(animation[0], color, arrayBars);\r\n               this.setBarColor(animation[1], color, arrayBars);\r\n            } else { // Execute swap of values in array.\r\n               this.setBarHeight(animation[0], animation[1], arrayBars);\r\n            }\r\n            // Triggered after final sorting animation finished.\r\n            if (i === animations.length - 1) this.finishedSortingAnimation();\r\n         }, i * (250 - this.state.SORTING_SPEED));\r\n      }\r\n   }\r\n\r\n   // Creates animations for the quick sort algorithm.\r\n   quickSort() {\r\n      const animations = QuickSort(this.state.arr);\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      for (let i = 0; i < animations.length; i++) {\r\n         const animation = animations[i];\r\n         setTimeout(() => {\r\n            // Change color of bars being compared.\r\n            if (animation.length < 4) {\r\n               const color = animation[0] === 0 ? this.state.DEFAULT_COLOR : this.state.COLOR;\r\n               if (animation.length === 3) {\r\n                  this.setBarColor(animation[1], color, arrayBars);\r\n                  this.setBarColor(animation[2], color, arrayBars);\r\n               } else {\r\n                  this.setBarColor(animation[1], color, arrayBars);\r\n               }\r\n            } else { // Execute swap of values in array.\r\n               this.setBarHeight(animation[2], animation[1], arrayBars);\r\n               this.setBarHeight(animation[3], animation[0], arrayBars);\r\n            }\r\n            // Triggered after final sorting animation finished.\r\n            if (i === animations.length - 1) this.finishedSortingAnimation();\r\n         }, i * (250 - this.state.SORTING_SPEED))\r\n      }\r\n   }\r\n\r\n   // Creates animations for the selection sort algorithm.\r\n   selectionSort() {\r\n      const animations = SelectionSort(this.state.arr);\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      for (let i = 0; i < animations.length; i++) {\r\n         const animation = animations[i];\r\n         setTimeout(() => {\r\n            // Change color of bars being compared.\r\n            if (animation.length < 4) {\r\n               const color = animation[0] === 0 ? this.state.DEFAULT_COLOR : this.state.COLOR;\r\n               this.setBarColor(animation[1], color, arrayBars);\r\n            } else { // Execute swap of values in array.\r\n               this.setBarHeight(animation[0], animation[3], arrayBars);\r\n               this.setBarHeight(animation[1], animation[2], arrayBars);\r\n            }\r\n            // Triggered after final sorting animation finished.\r\n            if (i === animations.length - 1) this.finishedSortingAnimation();\r\n         }, i * (250 - this.state.SORTING_SPEED))\r\n      }\r\n   }\r\n\r\n   // Creates animations for the bubble sort algorithm.\r\n   bubbleSort() {\r\n      const animations = BubbleSort(this.state.arr);\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      for (let i = 0; i < animations.length; i++) {\r\n         const animation = animations[i];\r\n         setTimeout(() => {\r\n            // Change color of bars being compared.\r\n            if (animation.length < 4) {\r\n               const color = animation[0] === 0 ? this.state.DEFAULT_COLOR : this.state.COLOR;\r\n               this.setBarColor(animation[1], color, arrayBars);\r\n               this.setBarColor(animation[2], color, arrayBars);\r\n            } else { // Execute swap of values in array.\r\n               this.setBarHeight(animation[0], animation[3], arrayBars);\r\n               this.setBarHeight(animation[1], animation[2], arrayBars);\r\n            }\r\n            // Triggered after final sorting animation finished.\r\n            if (i === animations.length - 1) this.finishedSortingAnimation();\r\n         }, i * (250 - this.state.SORTING_SPEED))\r\n      }\r\n   }\r\n\r\n   // Accepts an integer index, string color, array arrayBars as parameters\r\n   // and sets the bar at index to the specified color.\r\n   setBarColor(index, color, arrayBars) {\r\n      arrayBars[index].style.backgroundColor = color;\r\n   }\r\n\r\n   // Accepts an integer index, double height, array arrayBars as parameters\r\n   // and sets the bar at index to the specified height.\r\n   setBarHeight(index, height, arrayBars) {\r\n      arrayBars[index].style.height = this.findHeight(height) + 'px';\r\n      arrayBars[index].innerHTML = this.placeArrayValue(Math.floor(height));\r\n   }\r\n\r\n   // Render method for Main component.\r\n   render() {\r\n      return (\r\n         <div className='page-container'>\r\n            <div className='header'>\r\n               <h1 className='title'>Sorting Algorithm Visualizer</h1>\r\n               <div className='algorithm-button-container'>\r\n                  <button\r\n                     className='algorithm-button'\r\n                     onClick={() => this.setAlgo(0)}\r\n                     >Quick Sort\r\n                  </button>\r\n                  <button\r\n                     className='algorithm-button'\r\n                     onClick={() => this.setAlgo(1)}\r\n                     >Merge Sort\r\n                  </button>\r\n                  <button\r\n                     className='algorithm-button'\r\n                     onClick={() => this.setAlgo(2)}\r\n                     >Bubble Sort\r\n                  </button>\r\n                  <button\r\n                     className='algorithm-button'\r\n                     onClick={() => this.setAlgo(3)}\r\n                     >Selection Sort\r\n                  </button>\r\n               </div>\r\n               <button\r\n                  className='create-array-button'\r\n                  onClick={() => this.resetArray(this.state.NUM_BARS)}\r\n                  >Create New Array\r\n               </button>\r\n               <button\r\n                  className='start-sorting-button'\r\n                  onClick={() => this.runSortingAnimation()}\r\n                  disabled={!this.state.SORTABLE}\r\n                  >Start\r\n               </button>\r\n               <div className='slider-container'>\r\n                  <input\r\n                     className='num-elements'\r\n                     type='range'\r\n                     value={this.state.NUM_BARS}\r\n                     min='4'\r\n                     max='100'\r\n                     onChange={(evt) => this.changeNumElements(Math.floor(parseInt(evt.target.value)))}>\r\n                  </input>\r\n                  <p className='num-elements-text'>Array Size: {this.state.NUM_BARS}</p>\r\n                  <input\r\n                     className='sorting-speed'\r\n                     type='range'\r\n                     value={this.state.SORTING_SPEED}\r\n                     min='0'\r\n                     max='250'\r\n                     onChange={(evt) => this.setState({SORTING_SPEED: Math.floor(parseInt(evt.target.value))})}>\r\n                  </input>\r\n                  <p className='sorting-speed-text'>Sorting Speed</p>\r\n               </div>\r\n            </div>\r\n            <div className='array-container'>\r\n               {this.state.arr.map((value, idx) => (\r\n                  <div\r\n                     className='array-bar'\r\n                     key={idx}\r\n                     style={{\r\n                        backgroundColor: `${this.state.DEFAULT_COLOR}`,\r\n                        height: `${this.findHeight(value)}px`,\r\n                        width: `${(window.screen.width - 40) / this.state.NUM_BARS - 2}px`\r\n                     }}>{this.placeArrayValue(value)}</div>\r\n               ))}\r\n            </div>\r\n         </div>\r\n      )\r\n   }\r\n}\r\n","import React, { Component } from 'react';\nimport Main from './Components/Main';\n\nexport default class App extends Component {\n   render() {\n      return (\n         <div className=\"App\">\n            <Main />\n         </div>\n      );\n   }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}